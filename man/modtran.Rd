% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modtran.R
\name{modtran}
\alias{modtran}
\title{Estimate the orthogonal mapping matrix that determines the heterogeneity between two heterogeneous datasets.}
\usage{
modtran(
  ys = NULL,
  xs,
  yt = NULL,
  xt,
  family = "gaussian",
  rowmax = T,
  PERMUATION = T,
  refine = F,
  sparsify = F
)
}
\arguments{
\item{ys}{a vector for outcome in source data (if any).}

\item{xs}{the design matrix for source data.}

\item{yt}{a vector for outcome in target data (if any).}

\item{xt}{the design matrix for target data.}

\item{family}{a description of the error distribution and link function to be used in the model. The default is gaussian.}

\item{rowmax}{whether apply the top one method for each row or each column}

\item{PERMUATION}{whether one-to-one mapping or general mapping. The default is one-to-one mapping.}

\item{refine}{whether we refine the estimated mapping matrix leveraging the first moment relationship. The default is not to refine the estimated mapping matrix.}

\item{sparsify}{whether we sparsify the estimated mapping matrix for general mappings with cross-validation. This step requires (partially observed) target outcomes.}
}
\value{
A orthogonal mapping matrix.
}
\description{
This function estimates the orthogonal mapping matrix leveraging the second moment relationship between the two datasets
}
\examples{
n=30000
p=100
r=0.5
mu_predefine = rep(0,p)
A = matrix(runif(p^2)*2-1, ncol=p) 
cov.mat.predefine = t(A) \%*\% A
true.beta=rnorm(p)
x_s = MASS::mvrnorm(n = n, mu=mu_predefine, Sigma=cov.mat.predefine)
x_t = MASS::mvrnorm(n = n, mu=mu_predefine, Sigma=cov.mat.predefine)

k=round(p*r)
perm=c(sample(x=1:k,size=k,replace=F),(k+1):p)
perm.mat = matrix(rep(0,p*p),p)
for(j in 1:p){perm.mat[j,perm[j]]=1}

x_t_obs=x_t\%*\%perm.mat
y_s=x_s\%*\%true.beta+rnorm(n)
y_t=x_t\%*\%true.beta+rnorm(n)

rslt = modtran(ys=y_s, xs=x_s, yt=y_t, xt=x_t_obs, refine = F, sparsify = F)

coef.naive = coef(glm(y_s~-1+x_s, family = 'gaussian'))
coef.trans.gen=t(matrix(coef.naive,nrow=1)\%*\%rslt[["pi_hat_gen"]])
coef.trans.perm=t(matrix(coef.naive,nrow=1)\%*\%rslt[["pi_hat_perm"]])

norm(y_t-x_t_obs\%*\%coef.naive,"2")
norm(y_t-x_t_obs\%*\%coef.trans.perm,"2")
norm(y_t-x_t_obs\%*\%coef.trans.gen,"2")
}
